{"version":3,"sources":["TableDate.tsx","serviceWorker.ts","index.tsx"],"names":["TableDate","useState","date","totalTimes","data","setData","flag","dateFn","prop","propertyName","sort","object1","object2","value1","downSort","id","className","onClick","map","item","index","key","moment","format","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAoFeA,MAtEf,WAAsB,IAAD,EACOC,mBAAuB,CAC3C,CAACC,KAAM,UAAeC,WAAY,OAClC,CAACD,KAAM,WAAeC,WAAY,OAClC,CAACD,KAAM,WAAeC,WAAY,OAClC,CAACD,KAAM,WAAeC,WAAY,OAClC,CAACD,KAAM,WAAeC,WAAY,SANrB,mBACVC,EADU,KACJC,EADI,OASOJ,mBAAc,CAClCC,MAAM,EACNC,YAAY,IAXC,mBASVG,EATU,KA8BXC,GA9BW,KA8BF,SAACC,GAhBD,IAACC,GAiBO,IAAfH,EAAKE,GACLJ,EAAKM,MAlBGD,EAkBSD,EAjBd,SAAUG,EAAcC,GAG3B,OAFeD,EAAQF,GACRG,EAAQH,MAiBvBL,EAAKM,KAZI,SAACD,GACd,OAAO,SAAUE,EAAcC,GAC3B,IAAMC,EAASF,EAAQF,GAEvB,OADeG,EAAQH,GACPI,GAQNC,CAASN,IAEvBF,EAAKE,IAASF,EAAKE,GACnBH,EAAQ,YAAID,MAGhB,OACI,6BACI,4CACA,wRACA,2BAAOW,GAAG,QACN,+BACI,4BACI,4CACA,wBAAIC,UAAU,cAAcC,QAAS,kBAAMV,EAAO,UAAlD,gBACA,wBAAIS,UAAU,eAAeC,QAAS,kBAAMV,EAAO,gBAAnD,wBAGR,+BAEIH,EAAKc,KAAI,SAAUC,EAAMC,GACrB,OACI,wBAAIC,IAAKD,GACL,4BAAKA,EAAQ,GACb,4BAAOD,EAAKjB,KAAOoB,IAAOH,EAAKjB,MAAMqB,OAAO,8BAAiB,MAC7D,4BAAKJ,EAAKhB,oBC7DtBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cb88ef8f.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport moment from 'moment';\nimport './TableDate.css';\n\ninterface IDataState {\n    date: number;\n    totalTimes: number;\n}\n\ninterface IFlagState {\n    date: boolean;\n    totalTimes: boolean;\n}\n\nfunction TableDate() {\n    const [data, setData] = useState<IDataState[]>([\n        {date: 1508688000000, totalTimes: 68112 }, // 2017年10月23日\n        {date: 1501948800000, totalTimes: 68020 }, // 2017年8月6日\n        {date: 1510329600000, totalTimes: 69433 }, // 2017年11月11日\n        {date: 1462982400000, totalTimes: 69699 }, // 2016年5月12日\n        {date: 1484668800000, totalTimes: 42565 }, // 2017年1月18日\n    ]);\n\n    const [flag, setFlag] = useState<any>({\n        date: true,\n        totalTimes: true,\n    });\n\n    const upSort = (propertyName: string) => {\n        return function (object1: any, object2: any) {\n            const value1 = object1[propertyName];\n            const value2 = object2[propertyName];\n            return value1 - value2;\n        }\n    };\n\n    const downSort = (propertyName: string) => {\n        return function (object1: any, object2: any) {\n            const value1 = object1[propertyName];\n            const value2 = object2[propertyName];\n            return value2 - value1;\n        }\n    };\n\n    const dateFn = (prop: string) => {\n        if (flag[prop] === true) {\n            data.sort(upSort(prop));\n        } else {\n            data.sort(downSort(prop));\n        }\n        flag[prop] = !flag[prop];\n        setData([...data]);\n    };\n\n    return (\n        <div>\n            <h1>题目</h1>\n            <p>以下表格，点击 `#data .date` 后使表格按日期排序，当前是正序则改为倒序，当前是倒序则改为正序。</p>\n            <table id=\"data\">\n                <thead>\n                    <tr>\n                        <th>序号</th>\n                        <th className=\"date cursor\" onClick={() => dateFn('date')}>日期</th>\n                        <th className=\"total cursor\" onClick={() => dateFn('totalTimes')}>总次数</th>\n                    </tr>\n                </thead>\n                <tbody>\n                {\n                    data.map(function (item, index) {\n                        return (\n                            <tr key={index}>\n                                <td>{index + 1}</td>\n                                <td>{!!item.date ? moment(item.date).format('YYYY年MM月DD日') : '--'}</td>\n                                <td>{item.totalTimes}</td>\n                            </tr>\n                        );\n                    })\n                }\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default TableDate;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TableDate from './TableDate';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TableDate />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}